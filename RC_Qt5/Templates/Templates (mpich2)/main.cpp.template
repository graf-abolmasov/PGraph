#include "tpodata.h"
#include "memman.h"
#include "unistd.h"
#include <stdlib.h>
#include <stddef.h>
#include <time.h>

<#allActors>

#ifdef PARALLEL
class TPOData;
typedef int (ActorFunc)(TPOData *D);

ActorFunc *getFuncAddrByName(const char *name) {
<#getFuncAddrByName>
return NULL;
}
#endif

int main(int argc, char *argv[])
{
#ifdef PARALLEL
	MPI_Init(&argc, &argv);
	
	double start = MPI_Wtime();
	
	MPI_Comm_rank(MPI_COMM_WORLD, &myProcNum);
	MPI_Comm_size(MPI_COMM_WORLD, &totalProc);
	//printf("totalProc = %d\n", totalProc);
	
	//Для общения с менеждером памяти
    int          len[5] = { 1, 1, 1, 64, 1 };
    MPI_Aint     pos[5] = { offsetof(MemoryPacket,id), offsetof(MemoryPacket,offset),
                            offsetof(MemoryPacket,count), offsetof(MemoryPacket,msg_id),
                            sizeof(MemoryPacket) };
    MPI_Datatype typ[5] = { MPI_INT, MPI_LONG, MPI_LONG, MPI_CHAR, MPI_UB };

    MPI_Type_struct( 5, len, pos, typ, &memoryPacketDatatype );
    MPI_Type_commit( &memoryPacketDatatype );
	
	TPOData D(myProcNum);
	
	MPI_Barrier (MPI_COMM_WORLD);
	
	//Запускаем диспетчер памяти	
	if (myProcNum == 0) 
		memman(&D);
		
#endif
#ifndef PARALLEL
	TPOData D(0);
#endif
#ifdef PARALLEL
    if (myProcNum == 1) {
#endif
        <#graphname>(&D);
#ifdef PARALLEL
        for (int i = 2; i < totalProc; i++)
            MPI_Send(NULL, 0, MPI_INT, i, MPI_TAG_TERMINATE, MPI_COMM_WORLD);
        MPI_Send(NULL, 0, MPI_INT, 0, MPI_TAG_TERMINATE, MPI_COMM_WORLD);
    } else if (myProcNum > 1) {
        //Запускаем параллельные ветки, которые будут ждать команду на запуск
        //Название агрегата передается вместе с сообщением
        bool Terminate = false;
        while (!Terminate) {
            char actorName[64];
            MPI_Recv(&actorName, 64, MPI_CHAR, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
            if (status.MPI_TAG != MPI_TAG_TERMINATE) {
                parentProcNum = status.MPI_SOURCE;
                ActorFunc *Tp = getFuncAddrByName(actorName);
                if (Tp == NULL) {
                    printf("#### WARN: ActorFunc is NULL\r\n");
                    exit(-1);
                }
                Tp(&D);
            } else {
                Terminate = true;
            }
        }
    }
    MPI_Finalize();
#endif

    return 0;
}
